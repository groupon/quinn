'use strict';

import { parse as parseUrl } from 'url';
import { METHODS } from 'http';

// Not all node versions supports this
if (METHODS === undefined) METHODS = require('./methods');

import {createNamespace} from 'continuation-local-storage';

import {matchRoute} from './router/compile';

var routeContextNS = createNamespace('quinn-router');

class Router {
  constructor(request) {
    this._request = request;
    this._response = undefined;

    this._parsedUrl = parseUrl(request.url, true);

    var verb, i;
    for (i = 0; i < METHODS.length; ++i) {
      verb = METHODS[i];
      this[verb] = this.tryRoute.bind(this, verb);
    }
  }

  getResponse() {
    return this._response;
  }

  tryRoute(method, pattern, handler) {
    if (this._response !== undefined) return;

    if (typeof handler !== 'function') {
      throw new Error('Expected function as handler');
    }

    var req = this._request;
    var params = matchRoute(req.method, this._parsedUrl, method, pattern);
    if (params !== null) {
      routeContextNS.run( ctx => {
        ctx.params = params;
        ctx.parsedUrl = this._parsedUrl;
        ctx.query = ctx.parsedUrl.query;
        ctx.pathname = ctx.parsedUrl.pathname;
        this._response = handler(req);
      });
    }
    return this;
  }
}

export function route(routeDef) {
  return function(req) {
    var router = new Router(req);
    routeDef(router);
    return router.getResponse();
  };
}

export function setInRouteContext(key, value) {
  return routeContextNS.set(key, value);
}

export function getFromRouteContext(key) {
  return routeContextNS.get(key);
}

export function getQuery(name) {
  var query = getFromRouteContext('query');
  if (name === undefined) return query;
  return query[name];
}

export function getParam(name) {
  var params = getFromRouteContext('params');
  if (name === undefined) return params;
  return params[name];
}

var getParams = getParam;
export { getParams };
