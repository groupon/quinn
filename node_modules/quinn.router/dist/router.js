'use strict';

var parseUrl = require('url').parse;
var METHODS = require('http').METHODS;

// Not all node versions supports this
if (METHODS === undefined) METHODS = require('./methods');

var createNamespace = require('continuation-local-storage').createNamespace;

var matchRoute = require('./router/compile').matchRoute;

var routeContextNS = createNamespace('quinn.router');


  function Router(request) {
    this.$Router0 = request;
    this.$Router1 = undefined;

    this.$Router2 = parseUrl(request.url, true);

    var verb, i;
    for (i = 0; i < METHODS.length; ++i) {
      verb = METHODS[i];
      this[verb] = this.tryRoute.bind(this, verb);
    }
  }

  Router.prototype.getResponse=function() {
    return this.$Router1;
  };

  Router.prototype.tryRoute=function(method, pattern, handler) {
    if (this.$Router1 !== undefined) return;

    if (typeof handler !== 'function') {
      throw new Error('Expected function as handler');
    }

    var req = this.$Router0;
    var params = matchRoute(req.method, this.$Router2, method, pattern);
    if (params !== null) {
      routeContextNS.run( function(ctx)  {
        ctx.params = params;
        ctx.parsedUrl = this.$Router2;
        ctx.query = ctx.parsedUrl.query;
        ctx.pathname = ctx.parsedUrl.pathname;
        this.$Router1 = handler(req);
      }.bind(this));
    }
    return this;
  };


function route(routeDef) {
  return function(req) {
    var router = new Router(req);
    routeDef(router);
    return router.getResponse();
  };
} module.exports.route = route;

function setInRouteContext(key, value) {
  return routeContextNS.set(key, value);
} module.exports.setInRouteContext = setInRouteContext;

function getFromRouteContext(key) {
  return routeContextNS.get(key);
} module.exports.getFromRouteContext = getFromRouteContext;

function getQuery(name) {
  var query = getFromRouteContext('query');
  if (name === undefined) return query;
  return query[name];
} module.exports.getQuery = getQuery;

function getParam(name) {
  var params = getFromRouteContext('params');
  if (name === undefined) return params;
  return params[name];
} module.exports.getParam = getParam;

var getParams = getParam;
module.exports.getParams = getParams;
